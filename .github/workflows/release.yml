name: Automatic Release

on:
  push:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to release (patch/minor/major/auto)'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - patch
        - minor
        - major

jobs:
  release:
    runs-on: ubuntu-latest
    
    # Skip release if commit message contains [skip release]
    if: ${{ !contains(github.event.head_commit.message, '[skip release]') }}
    
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run tests
        run: pnpm test
        
      - name: Run lint
        run: pnpm lint
        
      - name: Setup Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Install release script dependencies
        run: |
          cd scripts
          pnpm install --frozen-lockfile
          
      - name: Determine version type
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "${{ github.event.inputs.version_type }}" != "auto" ]]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            echo "type=auto" >> $GITHUB_OUTPUT
          fi
          
      - name: Check if release is needed
        id: check_release
        run: |
          if [[ "${{ steps.version.outputs.type }}" == "auto" ]]; then
            # Check if there are any commits since last tag that warrant a release
            if pnpm tsx scripts/release.ts --check-only 2>/dev/null; then
              echo "needed=true" >> $GITHUB_OUTPUT
              echo "Release is needed based on commit analysis"
            else
              echo "needed=false" >> $GITHUB_OUTPUT
              echo "No release needed - no significant commits found"
            fi
          else
            echo "needed=true" >> $GITHUB_OUTPUT
            echo "Release forced via workflow dispatch"
          fi
          
      - name: Run release script
        if: steps.check_release.outputs.needed == 'true'
        run: |
          if [[ "${{ steps.version.outputs.type }}" == "auto" ]]; then
            pnpm tsx scripts/release.ts --non-interactive --ci
          else
            pnpm tsx scripts/release.ts --non-interactive --ci --version "${{ steps.version.outputs.type }}"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
          
      - name: Create GitHub Release
        if: steps.check_release.outputs.needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read package.json to get the new version
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const version = packageJson.version;
            const tagName = `v${version}`;
            
            // Read CHANGELOG.md to get release notes
            let changelogContent = '';
            try {
              const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
              const lines = changelog.split('\n');
              let capturing = false;
              let capturedLines = [];
              
              for (const line of lines) {
                if (line.startsWith(`## [${version}]`)) {
                  capturing = true;
                  continue;
                }
                if (capturing && line.startsWith('## [')) {
                  break;
                }
                if (capturing) {
                  capturedLines.push(line);
                }
              }
              
              changelogContent = capturedLines.join('\n').trim();
            } catch (error) {
              console.log('Could not read CHANGELOG.md, using default release notes');
              changelogContent = `Release ${version}`;
            }
            
            // Create the release
            try {
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release ${version}`,
                body: changelogContent || `Release ${version}`,
                draft: false,
                prerelease: version.includes('alpha') || version.includes('beta') || version.includes('rc')
              });
              
              console.log(`Created release: ${release.data.html_url}`);
            } catch (error) {
              console.error('Failed to create release:', error.message);
              throw error;
            }
            
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Release failed for commit ${context.sha.substring(0, 7)}`,
                body: `The automatic release workflow failed for commit ${context.sha}.
            
            **Workflow run:** ${context.payload.repository.html_url}/actions/runs/${context.runId}
            **Commit:** ${context.payload.head_commit?.message || 'N/A'}
            **Author:** ${context.payload.head_commit?.author?.username ? '@' + context.payload.head_commit.author.username : 'N/A'}
            
            Please check the workflow logs and retry the release manually if needed.`,
                labels: ['release', 'bug']
              });
              
              console.log(`Created issue: ${issue.data.html_url}`);
            } catch (error) {
              console.error('Failed to create issue:', error.message);
            }
            
      - name: Summary
        if: steps.check_release.outputs.needed == 'true'
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully released version $(node -p "require('./package.json').version")" >> $GITHUB_STEP_SUMMARY
          echo "📦 Package published to npm" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ Git tag created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "📋 GitHub release created" >> $GITHUB_STEP_SUMMARY